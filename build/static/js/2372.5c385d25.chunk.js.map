{"version":3,"file":"static/js/2372.5c385d25.chunk.js","mappings":"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","sources":["views/configurations/assetstatus/AssetStatus.js"],"sourcesContent":["\nimport  { useEffect, useState } from 'react'\nimport axios from 'axios'\nimport * as React from 'react'\n\nimport {\n    CCard,\n    CCardBody,\n    CCardHeader,\n    CCol,\n    CRow,\n    CForm,\n    CButton,\n    CInputGroup,\n\n  } from '@coreui/react'\n\n  import TextField from '@mui/material/TextField';\n\nimport {useNavigate} from 'react-router-dom';\nimport {useLocation} from 'react-router-dom';\n\nimport appSettings from 'src/AppSettings' // read the app config\nimport { decrypt } from 'n-krypta';\nimport WriteLog from 'src/components/logs/LogListener';\n\nfunction AssetStatus() {\n\n  const navigate = useNavigate();\n  const {state} = useLocation();\n  let rowId = \"\"\n  var userRole = \"\"\n  \n  try {\n     rowId = state.params;\n  }\n  catch(err){\n   navigate('/dashboard')\n  }\n  \n  var userID = \"\"\n  const [message,setMessage] = useState(\"\")\n  const [colorMessage,setColorMessage] = useState('red')\n\n  const [values,setValues] = useState({\n    statusid: \"\",\n    name: \"\",\n    description: \"\"\n  })\n\n  function CheckRole() {\n    try {\n\n      userRole = decrypt(window.localStorage.getItem('Kgr67W@'), appSettings.secretkeylocal)\n\n    }\n    catch(err) {\n      WriteLog(\"Error\",\"AssetStatus\",\"CheckRole Local Storage is tampered\", err.message,userID)\n      navigate('/dashboard')\n    }\n  }\n\n  function getUserInfo() {\n\n    try {\n      CheckRole()\n        if (userRole == \"Admin\" || userRole == \"IT\")\n          {\n              if((!window.localStorage.getItem('id') == null) || (window.localStorage.getItem('id') !== \"0\")) {\n                userID = decrypt(window.localStorage.getItem('id'), appSettings.secretkeylocal)\n              \n              }else{ \n                navigate('/login')\n            }\n          }\n        else {\n          navigate('/dashboard')\n        }\n          \n        }\n    catch(err) {\n      navigate('/dashboard')\n      }\n  }\n\n    useEffect(() => {\n     \n  getUserInfo()\n      }, [])\n\n    useEffect(() => {\n      if(userID == \"\") \n      {\n        getUserInfo()\n      }\n      if(!rowId == \"\") {\n      const url = 'http://localhost:3001/status/getStatusbyID'\n      axios.post(url,{rowId})\n      .then(res => {\n        const dataResponse = res.data.message;\n        if(dataResponse == \"Record Found\") {\n         \n          setValues(\n            {...values,statusid: res.data.result[0].assetStatusID,\n              name: res.data.result[0].statusName,\n              description: res.data.result[0].statusDescription\n            });\n\n        } else if (dataResponse == \"No Record Found\") {\n          setMessage(\"No Record Found\")\n          setColorMessage(\"red\")\n          WriteLog(\"Error\",\"AssetStatus\",\"useEffect /status/getStatusbyID\",res.data.message2,userID)\n          //navigate('/500');\n        }\n      }).catch(err => {\n        WriteLog(\"Error\",\"AssetStatus\",\"useEffect /status/getStatusbyID\",\"Load error in then/catch \\n\" + err.message,userID)\n      })\n    }\n    },[])\n\n\n    function handleInput(event){\n      setValues({...values,[event.target.name]: event.target.value})\n\n    }\n\n\n    function handleSubmit(event) {\n        try {\n    \n          event.preventDefault();\n         \n          if(userID == \"\") \n          {\n            getUserInfo()\n          }\n\n          const name = values.name;\n          const description = values.description;\n\n          if((!name == \"\") && \n            (!description == \"\")) {\n\n              if (rowId == \"\") {\n\n              const url = 'http://localhost:3001/status/putStatus'\n              axios.post(url,{name,description,userID})\n              .then(res => {  \n                  const dataResponse = res.data.message \n                  \n                  if(dataResponse == \"Insert Success\"){ \n                    WriteLog(\"Message\",\"AssetStatus\",\"handleSubmit /status/putStatus\", \n                    \" New Status \"\n                    + \"\\n Name: \" + name \n                    + \"\\n Desc  :  \" + description \n                    + \"\\n User : \" + userID ,userID)\n                    navigate('/configurations/statusview')\n                  } else if(dataResponse == \"Insert Error\") {\n                    \n                    WriteLog(\"Error\",\"AssetStatus\",\"handleSubmit /status/putStatus\",res.data.message2,userID)\n                    setMessage(\"dataResponse\")\n                    setColorMessage(\"red\")  \n                    navigate('/500');\n                  } \n              })\n              .catch(err => {\n                WriteLog(\"Error\",\"AssetStatus\",\"handleSubmit /status/putStatus\",\"Error in then/catch \\n\" + err.message,userID)\n                navigate('/500');\n              })\n              \n            }\n            else {\n              /// update here\n\n              const url = 'http://localhost:3001/status/updateStatus'\n              axios.post(url,{name,description,userID,rowId})\n              .then(res => {  \n                  const dataResponse = res.data.message\n                 \n                  if(dataResponse == \"Update Success\"){ \n                    WriteLog(\"Message\",\"AssetStatus\",\"handleSubmit /status/updateStatus\", \n                    \" New Status \"\n                    + \" AssetID : \" + rowId\n                    + \"\\n Name: \" + name \n                    + \"\\n Desc  :  \" + description \n                    + \"\\n User : \" + userID ,userID)\n                    navigate('/configurations/statusview')\n                  } else if(dataResponse == \"Update Error\") {\n                    \n                    WriteLog(\"Error\",\"AssetStatus\",\"handleSubmit /status/updateStatus\",res.data.message2,userID)\n                    setMessage(dataResponse)\n                    setColorMessage(\"red\")  \n                    navigate('/500');\n                  } \n              })\n              .catch(err => {\n                WriteLog(\"Error\",\"AssetStatus\",\"handleSubmit /status/updateStatus\",\"Error in then/catch \\n\" + err.message,userID)\n                navigate('/500');\n              })\n\n            }\n          }\n          else\n          {\n            setMessage(\"All fields must not be emtpy\")\n            setColorMessage(\"red\")  \n          }\n        }\n        catch(err) {\n          WriteLog(\"Error\",\"AssetStatus\",\"handleSubmit try/catch\",\"Error in try/catch\",userID)\n        }\n\n    }\n\n  return (\n\n    <CCol xs={12}>\n         <CCard className=\"mb-3\" size=\"sm\"  >\n         <CCardHeader>\n            <h6>\n            <span className=\"message\" style={{ color: '#5da4f5'}}> <> Asset Status </></span> \n            <br></br>\n            <strong><span className=\"message\" style={{ color: colorMessage}}><p>{message}</p></span> </strong>\n            </h6>\n          </CCardHeader>\n          <CForm onSubmit={handleSubmit}>\n            <CRow >\n                <CCol >\n                    <CCardBody>\n                      <CInputGroup size=\"sm\" className=\"mb-3\" >\n                          <TextField onChange={e => handleInput(e)} name=\"name\" id=\"outlined-textarea\"\n                            value={values.name} fullWidth label=\"Status Name\" placeholder=\"Status Name\" />\n                      </CInputGroup>\n                      <CInputGroup size=\"sm\" className=\"mb-3\" >\n                          <TextField onChange={handleInput} name=\"description\" id=\"outlined-textarea\" \n                              value={values.description} fullWidth label=\"Description\" placeholder=\"Description\" \n                              multiline  rows={5}  />\n                      </CInputGroup>\n                    </CCardBody>\n                </CCol>\n                <CCol>\n\n                </CCol>\n                <div className=\"d-grid\"  style={{\n                            \n                            display: 'flex',\n                            alignItems: 'center',\n                            justifyContent: 'center',\n                            }} >\n                  <CButton style={{   width: '120%' }}  color=\"success\" type='submit'>Save</CButton>\n            </div>\n            </CRow>\n\n          </CForm>\n         </CCard>\n    </CCol>\n  )\n}\n\nexport default AssetStatus\n"],"names":["navigate","useNavigate","state","useLocation","rowId","userRole","params","err","userID","_useState","useState","_useState2","_slicedToArray","message","setMessage","_useState3","_useState4","colorMessage","setColorMessage","_useState5","statusid","name","description","_useState6","values","setValues","getUserInfo","decrypt","window","localStorage","getItem","appSettings","secretkeylocal","WriteLog","CheckRole","handleInput","event","_objectSpread","_defineProperty","target","value","useEffect","axios","post","then","res","dataResponse","data","result","assetStatusID","statusName","statusDescription","message2","catch","_jsx","CCol","xs","children","_jsxs","CCard","className","size","CCardHeader","style","color","_Fragment","CForm","onSubmit","preventDefault","CRow","CCardBody","CInputGroup","TextField","onChange","e","id","fullWidth","label","placeholder","multiline","rows","display","alignItems","justifyContent","CButton","width","type"],"sourceRoot":""}