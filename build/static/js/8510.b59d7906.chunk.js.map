{"version":3,"file":"static/js/8510.b59d7906.chunk.js","mappings":"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","sources":["views/base/assetbyuser/AssetByUser.js"],"sourcesContent":["\nimport React from 'react'\nimport  { useEffect, useState } from 'react'\nimport axios from 'axios'\n\nimport {\n    CCard,\n    CCardBody,\n    CCardHeader,\n    CCol,\n    CRow,\n    CAccordion,\n    CAccordionBody,\n    CAccordionHeader,\n    CAccordionItem,\n    CForm,\n    CButton,\n    CFormSelect,\n    CFormInput,\n    CInputGroupText,\n    CInputGroup,\n    CFormLabel,\n    CFormFloating\n  } from '@coreui/react'\n\nimport {useNavigate} from 'react-router-dom';\nimport { DataGrid } from '@mui/x-data-grid';\n\nimport appSettings from 'src/AppSettings' // read the app config\nimport { encrypt, decrypt, compare } from 'n-krypta';\nimport WriteLog from 'src/components/logs/LogListener';\n\nfunction AssetByUser() {\n\n  const navigate = useNavigate();\n  \n  var userID = \"\"\n  var userRole = \"\"\n    const [success,SetSuccess] = useState(\"\");\n    const [errors,setErrors] = useState({})\n    const [message,setMessage] = useState(\"\")\n    const [colorMessage,setColorMessage] = useState('red')\n\nuseEffect(() => {\n  getUserInfo()\n}, [])\n\nfunction CheckRole() {\n  try {\n\n    userRole = decrypt(window.localStorage.getItem('Kgr67W@'), appSettings.secretkeylocal)\n\n  }\n  catch(err) {\n    WriteLog(\"Error\",\"AssetByUser\",\"CheckRole Local Storage is tampered\", err.message,userID)\n    navigate('/dashboard')\n  }\n}\n\nfunction getUserInfo() {\n\n  try {\n    CheckRole()\n      if (userRole == \"Admin\" || userRole == \"IT\")\n        {\n            if((!window.localStorage.getItem('id') == null) || (window.localStorage.getItem('id') !== \"0\")) {\n              userID = decrypt(window.localStorage.getItem('id'), appSettings.secretkeylocal)\n            \n            }else{ \n              navigate('/login')\n          }\n        }\n      else {\n        navigate('/dashboard')\n      }\n        \n      }\ncatch(err) {\n  navigate('/dashboard')\n    }\n}\n\n\n\n    function handleSubmit(event) {\n        try {\n    \n          event.preventDefault();\n    \n\n          \n        }\n        catch(err) {\n          console.log(err)\n        }\n    }\n\n////// Data Grid\n\nconst [assets,setAssets] = useState([])\n\nuseEffect(() => {\n  if(userID == \"\") \n  {\n    getUserInfo()\n  }\n  const url = 'http://localhost:3001/assets/viewallassetsassignbyuserfordeploy_deployed  '\n  axios.post(url,{userID})\n  .then(res => {\n    const dataResponse = res.data.message;\n    if(dataResponse == \"Record Found\") {\n      setAssets(res.data.result)\n    }\n  }).catch(err => {\n    WriteLog(\"Error\",\"AssetByUser\",\"handleCheckin /assets/viewallassetsassignbyuserfordeploy_deployed'\",err.message,userID)\n  })\n\n},[])\n\n\n    const columns = [\n      {\n        field: 'assetCode',\n        headerName: 'Asset Code',\n        width: 150,\n        editable: false,\n      },\n      {\n        field: 'assetName',\n        headerName: 'Name',\n        width: 150,\n        editable: false,\n      },\n      {\n        field: 'statusName',\n        headerName: 'Status',\n        width: 100,\n        editable: false,\n      },\n      {\n        field: 'assetCategName',\n        headerName: 'Category',\n        width: 150,\n        editable: false,\n      },\n      {\n        field: 'displayName',\n        headerName: 'Deploy By',\n        width: 130,\n        editable: false,\n      },\n      {\n        field: 'datecheckin',\n        headerName: 'Date Receive',\n        width: 130,\n        editable: false,\n      },\n    ];\n  \n\n    /////////// End of Datagrid \n\n  return (\n\n    <CCol xs={12}>\n         <CCard className=\"mb-3\" size=\"sm\"  >\n         <CCardHeader>\n            <h6>\n            <span className=\"message\" style={{ color: '#5da4f5'}}> <>My Current Asset(s)  </></span> \n            <br></br>\n            <strong><span className=\"message\" style={{ color: colorMessage}}><p>{message}</p></span> </strong>\n            </h6>\n          </CCardHeader>\n          <CForm onSubmit={handleSubmit}>\n            <CRow >\n                <CCol xs={12}>\n                    <CCardBody>\n                    <CInputGroup size=\"sm\" className=\"mb-3\">\n                            <div style={{ height: 400, width: '100%' }}>\n                                <DataGrid\n                                    rows={assets}\n                                    columns={columns}\n                                    initialState={{\n                                    pagination: {\n                                        paginationModel: {\n                                        pageSize: 5,\n                                        },\n                                    },\n                                    }}\n                                    pageSizeOptions={[5]}\n                                    rowSelection={true}\n                                \n                                />\n                            </div>\n                    </CInputGroup>\n                    </CCardBody>\n                </CCol>\n            </CRow>\n          </CForm>\n         </CCard>\n    </CCol>\n  )\n}\n\nexport default AssetByUser\n"],"names":["navigate","useNavigate","userID","userRole","_useState","useState","_useState2","_slicedToArray","_useState3","_useState4","_useState5","_useState6","message","_useState7","_useState8","colorMessage","getUserInfo","decrypt","window","localStorage","getItem","appSettings","secretkeylocal","err","WriteLog","CheckRole","useEffect","_useState9","_useState10","assets","setAssets","axios","post","then","res","data","result","catch","_jsx","CCol","xs","children","_jsxs","CCard","className","size","CCardHeader","style","color","_Fragment","CForm","onSubmit","event","preventDefault","console","log","CRow","CCardBody","CInputGroup","height","width","DataGrid","rows","columns","field","headerName","editable","initialState","pagination","paginationModel","pageSize","pageSizeOptions","rowSelection"],"sourceRoot":""}