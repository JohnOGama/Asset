{"version":3,"file":"static/js/7410.a0b2bda2.chunk.js","mappings":"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","sources":["components/DateFunc.js","components/logs/LogListenerUser.js","views/base/assetuser/AssetUser.js"],"sourcesContent":["\nfunction utils_getDate() {\n\n    let newDate = new Date()\n   \n    let year = newDate.getFullYear();\n    let month = newDate.getMonth() + 1;\n    let day = newDate.getDate();\n    let hr = newDate.getHours();\n    let minute = newDate.getMinutes();\n    let secs = newDate.getSeconds();\n   // let now =  year+\"/\"+month+\"/\"+day +\" \" + hr+\":\"+minute+\":\"+secs\n    let now =  month +\"/\" + day + \"/\" + year \n    // year+\"/\"+month+\"/\"+day \n   // console.log(newDate)\n   // console.log(day)\n\n    return now\n}\n\nexport default utils_getDate;","import axios from 'axios'\n\nfunction WriteUserInfo(logtype,module,userNotifID,receiver_name,receiver_dept,logvalues,userID) {\n    let notif = false\n\n    try {\n\n        const url = 'http://localhost:3001/log/putUserNotif'\n        axios.post(url,{logtype,module,userNotifID,receiver_name,receiver_dept,logvalues,userID})\n        .then(res => {\n        const dataResponse = res.data.message;\n        if(dataResponse == \"Insert Success\") {\n\n            notif = true\n         }\n         else\n         {\n            console.log(dataResponse)\n         }\n        })\n        .catch(err => {\n            console.log(err)\n            \n        })\n       \n    }\n    catch(err) {\n        console.log(\"Writing error -- \" + err)\n    }\n\n}\n\n\nexport default WriteUserInfo;","// eslint-disable-next-line\nimport  { useEffect, useState } from 'react'\nimport axios from 'axios'\nimport * as React from 'react'\n\n//import { DemoContainer } from '@mui/x-date-pickers/internals/demo';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\n\n// input Mask\n\nimport TextField from '@mui/material/TextField';\n\n\nimport { DataGrid } from '@mui/x-data-grid';\n\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport Paper from '@mui/material/Paper';\nimport Draggable from 'react-draggable';\n\n\nimport {\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  //CAccordion,\n  //CAccordionBody,\n  //CAccordionHeader,\n  //CAccordionItem,\n  CForm,\n  CButton,\n  CFormSelect,\n  //CFormInput,\n  //CInputGroupText,\n  CInputGroup,\n  //CFormLabel,\n  //CFormFloating\n} from '@coreui/react'\n\n/// For sending email imports \n//import {NextResponse} from 'next/server'\n//import {CheckoutEmail } from 'src/views/configurations/checkoutemail/CheckoutEmail';\n//import { Resend } from 'resend';\nimport emailjs from '@emailjs/browser'\nimport utils_getDate from '../../../components/DateFunc';\n//import {NextApiRequest,NextApiResponse} from 'next'\n/// End of sending email \n\nimport {useNavigate} from 'react-router-dom';\n\nimport appSettings from 'src/AppSettings' // read the app config\nimport {  decrypt } from 'n-krypta';\n// encrypt, compare\n//import { buildTimeValue } from '@testing-library/user-event/dist/types/utils';\n\nimport WriteLog from 'src/components/logs/LogListener';\nimport WriteUserInfo from '../../../components/logs/LogListenerUser'\nimport { Alert } from '@coreui/coreui';\nimport { FormControl } from '@mui/material';\n\nconst AssetUser = () => {\n\n  const navigate = useNavigate();\n  \n  \n  //const [userID,setUserID] = useState(\"\")\n  var userID = \"\"\n  var userRole = \"\"\n  \n\n  const [message,setMessage] = useState(\"\")\n  const [colorMessage,setColorMessage] = useState('red')\n  \n  //const bShowConsole = false;\n  //const [assetStat,setAssetStat] = useState(\"\");\n  const [assetsAvailable, setAssetsAvailable] = useState([])\n  const [assetdeploy,setAssetDeploy] = useState(\"\");\n\n  const [users, setUsers] = useState([]);\n  const [checkout, setCheckout] = useState(\"\");\n  const [rowselected,setRowSelected] = useState({})\n\n  const [userSelected,setUserSelected] = useState ({\n    userid: '',\n    notes: ''\n    })\n\n    const [receiverInfo,setReceiverInfo] = useState ({\n      receiverID: '',\n      receiveremail: '',\n      receivername: '',\n      positionID: '',\n      deptID: ''\n      })\n  \n\n\n  useEffect(() => {\n    CheckRole()\n    getUserInfo()\n    GetUsersActive()\n   // GetAssetStatus_Available()\n    GetStatus_ForDeploy()\n   // GetAllAssets_Available()\n    }, [])\n\n\n    useEffect(() => {\n      \n      try {\n\n        const url = 'http://localhost:3001/assets/getallassetsavailable'\n        axios.post(url)\n        .then(response => {\n          const dataResponse = response.data.message;\n          if(dataResponse == \"Record Found\") {\n            setAssetsAvailable(response.data.result)\n            \n          } else if (dataResponse == \"No Record Found\") {\n             setMessage(\"No assets available\")\n             setColorMessage('red')\n          }\n        }).catch(err => {\n          WriteLog(\"Error\",\"AssetUser\",\"useEffect /assets/getallassetsavailable\",\"then/catch \\n \" + err.message,userID)\n        })\n      }\n      catch(err) {\n        WriteLog(\"Error\",\"AssetUser\",\"useEffect /assets/getallassetsavailable\",\"try/catch \\n\" + err.message,userID)\n      }\n\n      }, [])\n\n    function CheckRole() {\n      try {\n  \n        userRole = userID = decrypt(window.localStorage.getItem('Kgr67W@'), appSettings.secretkeylocal)\n  \n      }\n      catch(err) {\n        WriteLog(\"Error\",\"AssetUser\",\"CheckRole Local Storage is tampered\", err.message,userID)\n        navigate('/dashboard')\n      }\n    }\n\n    function getUserInfo() {\n\n      try {\n        CheckRole()\n          if (userRole == \"Admin\" || userRole == \"IT\")\n            {\n                if((!window.localStorage.getItem('id') == null) || (window.localStorage.getItem('id') !== \"0\")) {\n                  userID = decrypt(window.localStorage.getItem('id'), appSettings.secretkeylocal)\n                  \n                \n                }else{ \n                  navigate('/login')\n              }\n            }\n          else {\n            navigate('/dashboard')\n          }\n            \n          }\n        catch(err) {\n          navigate('/dashboard')\n        }\n        \n    }\n\n    function GetUsersActive() {\n        try {\n        const url = 'http://localhost:3001/getuserbyactive'\n        axios.post(url,{userID})\n        .then(res => {\n          const dataResponse = res.data.message;\n          if(dataResponse == \"Record Found\") {\n            setUsers(res.data.result)\n          } else if (dataResponse == \"No Record Found\") {\n            WriteLog(\"Error\",\"AssetUser\",\"useeffect /getuserbyactive'\", dataResponse,userID)\n          }\n        }).catch(err => {\n          WriteLog(\"Error\",\"AssetUser\",\"useeffect /getuserbyactive'\",\"Error in then/catch \" + err.message,userID)\n        })\n      } catch(err) {\n        WriteLog(\"Error\",\"AssetUser\",\"GetUsersActive /getuserbyactive'\",\"Error in try/catch \" + err.message,userID)\n      }\n\n    }\n\n    /*\n    function GetAssetStatus_Available() {\n      try {\n\n        const url = 'http://localhost:3001/assets/getAssetStatus'\n        axios.post(url)\n        .then(response => {\n          const dataResponse = response.data.message;\n          if(dataResponse == \"Record Found\") {\n            setAssetStat(response.data.result[0].assetStatusID)\n           \n          } else if (dataResponse == \"No Record Found\") {\n            WriteLog(\"Error\",\"AssetUser\",\"GetAssetStatus_Available /assets/getAssetStatus\",dataResponse,userID)\n          }\n        }).catch(err => {\n          WriteLog(\"Error\",\"AssetUser\",\"GetAssetStatus_Available /assets/getAssetStatus\",\"Error in then/catch \" + err.message,userID)\n        })\n      }\n      catch(err) {\n        WriteLog(\"Error\",\"AssetUser\",\"GetAssetStatus_Available /assets/getAssetStatus\",\"Error in try/catch \" + err.message,userID)\n      }\n    }\n*/\n\n    function GetStatus_ForDeploy() {\n        try {\n          const url = 'http://localhost:3001/assets/getassetfordeploystatus'\n          axios.post(url)\n          .then(response => {\n            const dataResponse = response.data.message;\n            if(dataResponse == \"Record Found\") {\n              setAssetDeploy(response.data.result[0].assetStatusID)\n              \n            } else if (dataResponse == \"No Record Found\") {\n              WriteLog(\"Error\",\"AssetUser\",\"useeffect /assets/getassetfordeploystatus\",response.data.message2,userID)\n            }\n          }).catch(err => {\n            WriteLog(\"Error\",\"AssetUser\",\"useeffect /assets/getassetfordeploystatus\",\"then/catch \\n\" + err.message,userID)\n          })\n      }\n      catch(err) {\n        WriteLog(\"Error\",\"AssetUser\",\"useeffect /assets/getassetfordeploystatus\",\"try/catch \\n\" + err.message,userID)\n      }\n    }\n \n    const GetAllAssets_Available = () =>  {\n      try {\n\n        const url = 'http://localhost:3001/assets/getallassetsavailable'\n        axios.post(url)\n        .then(response => {\n          const dataResponse = response.data.message;\n          if(dataResponse == \"Record Found\") {\n            setAssetsAvailable(response.data.result)\n            \n          } else if (dataResponse == \"No Record Found\") {\n             setMessage(\"No assets available\")\n             setColorMessage('red')\n          }\n        }).catch(err => {\n          WriteLog(\"Error\",\"AssetUser\",\"GetAllAssets_Available /assets/getallassetsavailable\",\"then/catch \\n \" + err.message,userID)\n        })\n      }\n      catch(err) {\n        WriteLog(\"Error\",\"AssetUser\",\"GetAllAssets_Available /assets/getallassetsavailable\",\"try/catch \\n\" + err.message,userID)\n      }\n    }\n\n\n  function handleInput(e){\n     // user selected and notes\n    setUserSelected({...userSelected,[e.target.name]: e.target.value})\n   \n  }\n\nuseEffect(() => {\n  //console.log()\n}, [assetsAvailable])\n\n  function handleClick() {\n    setOpen(false)\n      InsertAssetDetail();\n      sendEmail(userSelected.userid);\n     \n      navigate('/dashboard')\n  }\n\n  function handleSubmit(event) {\n    try {\n      window.localStorage.setItem('Kvsf45_','0')\n     event.preventDefault();\n\n   \n     if (Object.keys(rowselected).length > 0) {\n        const varuserID = userSelected.userid\n        const dateCheckout = checkout\n        const notes = userSelected.notes\n          if((varuserID !== \"\") && \n            (dateCheckout !== \"\") && \n            (notes !== \"\"))\n          {\n\n            setMessage(\"\")\n            setColorMessage('')\n            SetTotalSelected(Object.keys(rowselected).length)\n            GetEmailInfo_UserSelected(varuserID)\n            setOpen(true)\n\n          } else {\n            setOpen(false)\n            setMessage(\" All Fields must not be Empty\")\n            setColorMessage(\"orange\") \n          }\n  \n        } else \n        {\n          setMessage(\"No Asset Selected\")\n          setColorMessage(\"orange\")\n        }\n\n\n    }\n    catch(err) {\n      WriteLog(\"Error\",\"AssetUser\",\"handleSubmit /assets/searchuser\",err.message,userID)\n    }\n\n  }\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  function GetEmailInfo_UserSelected(param) {\n    try {\n      const rowId = param\n      const url = 'http://localhost:3001/email/getemailinfo'\n      axios.post(url,{rowId})\n      .then(response => {\n        const dataResponse = response.data.message;\n        if(dataResponse == \"Record Found\") {\n      \n                //email = response.data.result[0].email\n                //name =  response.data.result[0].userName\n                setReceiverInfo({...receiverInfo,\n                  receiverID: response.data.result[0].userID,\n                  receiveremail: response.data.result[0].email,\n                  receivername: response.data.result[0].userName,\n                  positionID: response.data.result[0].positionID,\n                  deptID: response.data.result[0].deptID})\n  \n        } else if (dataResponse == \"No Record Found\") {\n          WriteLog(\"Error\",\"AssetUser\",\"GetEmailInfo /email/getemailinfo\",\"then/catch \\n \" + response.data.message,userID)\n        }\n      }).catch(err => {\n        WriteLog(\"Error\",\"AssetUser\",\"GetEmailInfo /assets/getallassetsavailable\",\"then/catch \\n \" + err.message,userID)\n      })\n  \n    }\n    catch(err) {\n      WriteLog(\"Error\",\"AssetUser\",\"GetEmailInfo /assets/updateassetdeploy\",\"Error in try/catch\",userID)\n    }\n  }\n\n  function InsertAssetDetail() {\n  \n   \n    const varuserid = userSelected.userid\n    const varnotes = userSelected.notes\n    const positionID = receiverInfo.positionID\n    const departmentID = receiverInfo.deptID\n   \n    try {\n      getUserInfo()\n      rowselected.forEach((irow, index) => {\n\n            const assetid = irow\n            const url = 'http://localhost:3001/assets/putassetsdetail'\n            axios.post(url,{varuserid,assetid,positionID,departmentID,checkout,userID,assetdeploy,varnotes})\n            .then(response => {\n              const dataResponse = response.data.message;\n              if(dataResponse == \"Insert Success\") {  \n              //  console.log(\" Assets inserted successful\");\n                // let update the Assets to status to deploy\n               \n                var writeOnce = window.localStorage.getItem('Kvsf45_')\n                if (writeOnce == '0' ) {\n                  window.localStorage.setItem('Kvsf45_','1')\n                \n                }\n\n                WriteLog(\"Message\",\"AssetUser\",\"InsertAssetDetail /assets/putassetsdetail\", \n                \"Asset Checkout \"\n                + \"\\n AssetID: \" + assetid \n                + \"\\n Checkout To :  \" + varuserid \n                + \"\\n Status :  \" + assetdeploy \n                + \"\\n Desc : \" + varnotes,userID)\n                \n\n  \n                UpdateAssetDeploy(assetid);\n              }else if (dataResponse == \"Insert Error\") {\n                WriteLog(\"Error\",\"AssetUser\",\"InsertAssetDetail /assets/putassetsdetail\",response.data.message2,userID)\n                //console.log(\"Error in Inserting asset ===> \" + assetid )\n              }\n            }).catch(err => {\n              WriteLog(\"Error\",\"AssetUser\",\"InsertAssetDetail /assets/putassetsdetail\", \" Error in then/catch \" + err.message,userID)\n            })\n  \n      })\n    }catch(err) {\n      WriteLog(\"Error\",\"AssetUser\",\"InsertAssetDetail /assets/putassetsdetail\",\" Error in try/catch \" +  err.message,userID)\n    }\n  \n  }\n\n\n\n  function UpdateAssetDeploy(varassetid) {\n    try {\n      \n     \n      const url = 'http://localhost:3001/assets/updateassetdeploy'\n      axios.post(url,{assetdeploy,varassetid,userID})\n      .then(response => { \n        const updateResponse = response.data.message;\n        /*\n        if (updateResponse == \"Update Success\") {\n          WriteLog(\"Message\",\"AssetUser\",\"UpdateAssetDeploy /assets/updateassetdeploy\",updateResponse,userID)\n        }\n        */\n        if(updateResponse == \"Update Error\") {\n          \n        WriteLog(\"Error\",\"AssetUser\",\"UpdateAssetDeploy /assets/updateassetdeploy\",response.data.message2,userID)\n        }\n  \n      }).catch(err => {\n        WriteLog(\"Error\",\"AssetUser\",\"UpdateAssetDeploy /assets/updateassetdeploy\",err.message,userID)\n      })\n  \n    }\n    catch(err) {\n      WriteLog(\"Error\",\"AssetUser\",\"UpdateAssetDeploy /assets/updateassetdeploy\",\"Error in try/catch\" + err.message,userID)\n    }\n  \n  }\n\n  /// For Data Grid \n\n\n\n  const columns = [\n    \n    {\n      field: 'assetCode',\n      headerName: 'Code',\n      width: 120,\n      editable: false,\n    },\n    {\n      field: 'assetCategName',\n      headerName: 'Category',\n      width: 100,\n      editable: false,\n    },\n    {\n      field: 'assetName',\n      headerName: 'Name',\n      width: 200,\n      editable: false,\n    },\n    {\n      field: 'statusName',\n      headerName: 'Status',\n      width: 130,\n      editable: false,\n    },\n  ];\n\n  /////////// End of Datagrid \n\n  function sendEmail(userid) {\n\n    let strDate =   utils_getDate();\n    let allow_email_checkout = appSettings.ALLOW_SENDEMAIL_CHECKOUT_BY_IT\n    let success_insert = window.localStorage.getItem('Kvsf45_')\n    \n\n    try {\n      var templateParams = {\n      email_to: receiverInfo.receiveremail,\n      email_sender: appSettings.email_sender,\n      reply_to : appSettings.reply_to,\n      name: receiverInfo.receivername,\n      notes: userSelected.notes,\n      date: strDate\n      };\n\n    if(success_insert === \"0\") {\n      if(allow_email_checkout === 'send') {\n\n      emailjs.send(appSettings.YOUR_SERVICE_ID, appSettings.YOUR_TEMPLATE_ID, templateParams,appSettings.public_key)\n      .then(function(response) {\n\n        WriteUserInfo(\"Info\",\"AssetUser\",userid,receiverInfo.receivername,receiverInfo.deptID,\n        \"Asset Check Out by IT \"\n        + \"\\nNotes : \" + templateParams.notes,userID)\n\n      }, function(error) {\n        WriteLog(\"Error\",\"AssetUser\",\"sendEmail \",\"Error in sending emailjs \\n\" +\n        \"Info : \" \n        + \"Failed sending email to selected user : \" + userid + \"\\n\"\n        + \"Plan receive asset : \" + templateParams.date + \"\\n \"\n        + \"Notes : \" + templateParams.notes + \"\\n\"\n        + error.message,\n        userID)\n\n      });\n\n      }\n      else\n      {\n        WriteUserInfo(\"Info\",\"AssetUser\",userid,receiverInfo.receivername,receiverInfo.deptID,\n        \"Asset Check Out by IT \"\n        + \"\\nNotes : \" + templateParams.notes,userID)\n      }\n\n    }\n    \n\n  }\n  catch(err) {\n\n    WriteLog(\"Error\",\"AssetUser\",\"send emailjs\",\"Error in try/catch \" + err.message,userID)\n  }\n  }\n  \n  // For Dialog Box\n\nfunction PaperComponent(props) {\n  return (\n    <Draggable\n      handle=\"#draggable-dialog-title\"\n      cancel={'[class*=\"MuiDialogContent-root\"]'}\n    >\n      <Paper {...props} />\n    </Draggable>\n  );\n}\n\nconst [open, setOpen] = React.useState(false);\nconst [iselected,SetTotalSelected] = useState(0)\n\n  return (\n    \n      <CCol xs={12}>\n        <CCard className=\"mb-3\" size=\"sm\"  >\n          <CCardHeader>\n            <h6>\n            <span className=\"message\" style={{ color: '#5da4f5'}}> <> Asset Check Out  </></span> \n            <br></br>\n            <strong><span className=\"message\" style={{ color: colorMessage}}><p>{message}</p></span> </strong>\n            </h6>\n          </CCardHeader>\n           <CCardBody>\n          <CForm onSubmit={handleSubmit}>\n              <CRow >\n              \n                <CCol xs={4} md={3} xl={3}  >\n                    <CFormSelect size=\"sm\" className=\"mb-3\" aria-label=\"Small select example\"\n                      name='userid' onChange={handleInput} >\n                      {\n                           \n                          users.map((val,result) => \n                              <option key={val.userDisplayID} value={val.userDisplayID} > {val.fullname} </option>\n                          )\n                      }\n                    </CFormSelect>\n                      <CInputGroup size=\"sm\" className=\"mb-3\">\n                        <LocalizationProvider dateAdapter={AdapterDayjs}>\n                            <DatePicker size=\"sm\"\n                              name='checkout  '\n                              label=\"Plan Checkout \"\n                              fullWidth true\n                              onChange={(checkout) => setCheckout(checkout)}\n                            />\n                        </LocalizationProvider>\n                      </CInputGroup>\n               \n                      <CInputGroup size=\"sm\" className=\"mb-3\" >\n                        <TextField onChange={handleInput} name=\"notes\" id=\"outlined-textarea\" \n                        fullWidth label=\"Notes\" placeholder=\"You have asset(s) to be pickup on schedule date\" multiline  rows={5}\n      \n                        />\n                      </CInputGroup>\n           \n                      <div className=\"d-grid\" style={{\n                            \n                            display: 'flex',\n                            alignItems: 'center',\n                            justifyContent: 'center',\n                            }} >\n                      <CButton color=\"success\" type='submit' >Assign Asset</CButton>\n                    </div>\n                \n                </CCol>\n                      \n                <CCol xs={6} md={9} xl={9} >\n          \n             \n               \n            \n\n                  <DataGrid\n                    rows={assetsAvailable}\n                    columns={columns}\n                    initialState={{\n                      pagination: {\n                        paginationModel: {\n                          pageSize: 5,\n                        },\n                      },\n                    }}\n                    pageSizeOptions={[5]}\n                    checkboxSelection\n                    disableRowSelectionOnClick\n                    onRowSelectionModelChange={id => setRowSelected(id)}\n                  />\n       \n               \n           \n             \n                <Dialog\n                        open={open}\n                        onClose={handleClose}\n                        PaperComponent={PaperComponent}\n                        aria-labelledby=\"draggable-dialog-title\"\n                      >\n                        <DialogTitle style={{ cursor: 'move' }} id=\"draggable-dialog-title\">\n                           Checkout  Asset(s)\n                        </DialogTitle>\n                        <DialogContent>\n                          <DialogContentText>\n                            Are you sure you want to Checkout  asset(s) ?\n                            <br></br>\n                            Selected : {iselected}\n\n                          </DialogContentText>\n                        </DialogContent>\n                        <DialogActions>\n                          <Button autoFocus onClick={handleClose}>\n                            Cancel\n                          </Button>\n                          <Button onClick={handleClick}>Checkout</Button>\n                        </DialogActions>\n                  </Dialog>\n                \n            \n            \n\n              </CCol>\n            </CRow>\n          </CForm>\n          </CCardBody>\n        </CCard>\n      </CCol>\n\n  )\n}\n\nexport default AssetUser\n"],"names":["newDate","Date","year","getFullYear","month","getMonth","day","getDate","getHours","getMinutes","getSeconds","logtype","module","userNotifID","receiver_name","receiver_dept","logvalues","userID","axios","post","then","res","dataResponse","data","message","console","log","catch","err","navigate","useNavigate","userRole","_useState","useState","_useState2","_slicedToArray","setMessage","_useState3","_useState4","colorMessage","setColorMessage","_useState5","_useState6","assetsAvailable","setAssetsAvailable","_useState7","_useState8","assetdeploy","setAssetDeploy","_useState9","_useState10","users","setUsers","_useState11","_useState12","checkout","setCheckout","_useState13","_useState14","rowselected","setRowSelected","_useState15","userid","notes","_useState16","userSelected","setUserSelected","_useState17","receiverID","receiveremail","receivername","positionID","deptID","_useState18","receiverInfo","setReceiverInfo","CheckRole","decrypt","window","localStorage","getItem","appSettings","secretkeylocal","WriteLog","getUserInfo","useEffect","url","result","GetUsersActive","response","assetStatusID","message2","GetStatus_ForDeploy","handleInput","e","_objectSpread","_defineProperty","target","name","value","handleClose","setOpen","_React$useState","React","_React$useState2","open","_useState19","_useState20","iselected","SetTotalSelected","_jsx","CCol","xs","children","_jsxs","CCard","className","size","CCardHeader","style","color","_Fragment","CCardBody","CForm","onSubmit","event","setItem","preventDefault","Object","keys","length","varuserID","dateCheckout","param","rowId","email","userName","GetEmailInfo_UserSelected","CRow","md","xl","CFormSelect","onChange","map","val","userDisplayID","fullname","CInputGroup","LocalizationProvider","dateAdapter","AdapterDayjs","DatePicker","label","fullWidth","true","TextField","id","placeholder","multiline","rows","display","alignItems","justifyContent","CButton","type","DataGrid","columns","field","headerName","width","editable","initialState","pagination","paginationModel","pageSize","pageSizeOptions","checkboxSelection","disableRowSelectionOnClick","onRowSelectionModelChange","Dialog","onClose","PaperComponent","props","Draggable","handle","cancel","Paper","DialogTitle","cursor","DialogContent","DialogContentText","DialogActions","Button","autoFocus","onClick","varuserid","varnotes","departmentID","forEach","irow","index","assetid","varassetid","UpdateAssetDeploy","InsertAssetDetail","strDate","utils_getDate","allow_email_checkout","ALLOW_SENDEMAIL_CHECKOUT_BY_IT","success_insert","templateParams","email_to","email_sender","reply_to","date","emailjs","YOUR_SERVICE_ID","YOUR_TEMPLATE_ID","public_key","WriteUserInfo","error","sendEmail"],"sourceRoot":""}